---
// src/components/AddressList.astro
import Layout from '../layouts/layout.astro';
// Función para obtener datos de la API
async function getVehiculosData() {
  try {
    const response = await fetch(
      "https://60sgw4z5-8000.use.devtunnels.ms/api/v1/vehiculo/"
    );
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching data:", error);
    return [];
  }
}

// Obtener los datos
const vehiculos = await getVehiculosData();

// Colores para alternar en los puntos
const colors = ["green", "green", "green", "green", "green"];
---

<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <title>Mapa de Domiciliarios</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        #map { height: 100%; }
    </style>

</head>
<Layout title="Hermes">
<body class=" text-black mx-auto">
    <div class="flex justify-center gap-x-4 mx-auto max-w-7xl">
        <!-- Sección del mapa (izquierda) -->
        <div class="w-full aspect-video overflow-hidden rounded-lg">
            <div class="w-full h-full bg-gray-700 rounded-lg">
                <div id="map"></div>
            </div>
        </div>

        <!-- Sección de lista y detalles (derecha) -->
        <div class=" flex flex-col max-w-xs w-full flex-none">
            <!-- Lista de domiciliarios -->
            <div class="h-1/2 p-4 border shadow-md overflow-y-auto ">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Lista de domiciliarios:</h2>

                <ul>
                    {
                      vehiculos.map((vehiculo: any, index: number) => (
                        <li class="mb-2" data-key={index}>
                          <span
                            class={`inline-block w-3 h-3 rounded-full bg-${colors[index % colors.length]}-500 mr-2`}
                          />
                          {vehiculo.domiciliario} {vehiculo.placa}
                        </li>
                      ))
                    }
                  </ul>
            </div>

            <!-- Detalles del domiciliario seleccionado -->
           <!-- <div class="h-1/2 p-4 bg-gray-700">
                <h2 class="text-xl font-bold mb-4">Detalles del domiciliario</h2>
                <p class="mb-4">Seleccione un domiciliario para obtener más detalles.</p>
            </div>-->
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const socket = io('https://60sgw4z5-3000.use.devtunnels.ms/');
        
            var map = L.map('map').setView([4.1161341, -73.6091948], 20);
        
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
    
            const iconos = {
                iconoRojo: L.icon({
                    iconUrl: 'https://res.cloudinary.com/dayyizlq6/image/upload/v1728608263/icons/openmoji--motorbike-helmet_2_ucnsvh.png',
                    iconSize: [38, 38],
                    iconAnchor: [19, 38],
                    popupAnchor: [0, -38]
                }),
                iconoAzul: L.icon({
                    iconUrl: 'https://res.cloudinary.com/dayyizlq6/image/upload/v1730087957/openmoji--motorbike-helmet_1_u2m4cz.png',
                    iconSize: [38, 38],
                    iconAnchor: [19, 38],
                    popupAnchor: [0, -38]
                })
            };
    
            const markers = {};
    
            // Función para determinar el ícono basado en el estado de disponibilidad
            const getIcon = (estado) => estado === 'disponible' || estado === 'Disponible' ? iconos.iconoRojo : iconos.iconoAzul;
    
            // Escucha las actualizaciones de ubicación desde el servidor
            socket.on('locationsUpdate', (repartidoresObj) => {
                Object.keys(repartidoresObj).forEach((repartidorID) => {
                    const { latitude, longitude, estado } = repartidoresObj[repartidorID];
    
                    if (!markers[repartidorID]) {
                        // Crea un marcador si no existe para el repartidor
                        const marker = L.marker([latitude, longitude], {
                            icon: getIcon(estado)
                        }).addTo(map);
    
                        // Añade evento click para mostrar el domiID en un popup
                        marker.on('click', () => {
                            marker.bindPopup(`domiID: ${repartidorID}`).openPopup();
                        });
    
                        // Guarda el marcador en el objeto markers
                        markers[repartidorID] = marker;
                    } else {
                        // Actualiza la ubicación del marcador existente
                        markers[repartidorID].setLatLng([latitude, longitude]);
                    }
                });
            });
    
            // Escucha la desconexión de usuarios
            socket.on('userDisconnected', (repartidorID) => {
                if (markers[repartidorID]) {
                    map.removeLayer(markers[repartidorID]);
                    delete markers[repartidorID];
                }
            });
        });
    </script>
</body>
</html>
</Layout>